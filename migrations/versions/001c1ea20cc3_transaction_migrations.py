"""transaction  migrations

Revision ID: 001c1ea20cc3
Revises: 3921afe25998
Create Date: 2025-09-11 20:51:18.772570

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy import inspect
from app.utils.guid_utils import GUID


# revision identifiers, used by Alembic.
revision = '001c1ea20cc3'
down_revision = '3921afe25998'
branch_labels = None
depends_on = None


def table_exists(table_name):
    bind = op.get_bind()
    inspector = inspect(bind)
    return inspector.has_table(table_name)


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    if not table_exists('payment_method'):
        op.create_table('payment_method',
            sa.Column('id', GUID(), nullable=False),
            sa.Column('user_id', GUID(), nullable=False),
            sa.Column('type', sa.String(length=50), nullable=False),
            sa.Column('provider', sa.String(length=50), nullable=True),
            sa.Column('external_id', sa.String(length=255), nullable=True),
            sa.Column('details', sa.JSON(), nullable=True),
            sa.Column('is_default', sa.Boolean(), nullable=True),
            sa.Column('created_at', sa.DateTime(), nullable=False),
            sa.Column('updated_at', sa.DateTime(), nullable=False),
            sa.ForeignKeyConstraint(['user_id'], ['user.id'], ),
            sa.PrimaryKeyConstraint('id')
        )
    
    if not table_exists('beneficiaries'):
        op.create_table('beneficiaries',
            sa.Column('id', GUID(), nullable=False),
            sa.Column('user_id', GUID(), nullable=False),
            sa.Column('account_id', GUID(), nullable=False),
            sa.Column('bank_name', sa.String(length=255), nullable=False),
            sa.Column('account_number', sa.String(length=255), nullable=False),
            sa.Column('routing_number', sa.String(length=255), nullable=False),
            sa.Column('beneficiary_name', sa.String(length=255), nullable=False),
            sa.Column('created_at', sa.DateTime(), nullable=False),
            sa.ForeignKeyConstraint(['account_id'], ['account.id'], ),
            sa.ForeignKeyConstraint(['user_id'], ['user.id'], ),
            sa.PrimaryKeyConstraint('id')
        )
    
    if not table_exists('transaction'):
        op.create_table('transaction',
            sa.Column('id', GUID(), nullable=False),
            sa.Column('user_id', GUID(), nullable=False),
            sa.Column('debit_account_id', GUID(), nullable=True),
            sa.Column('credit_account_id', GUID(), nullable=True),
            sa.Column('payment_method_id', GUID(), nullable=True),
            sa.Column('beneficiary_id', GUID(), nullable=True),
            sa.Column('type', sa.String(length=50), nullable=False),
            sa.Column('status', sa.String(length=50), nullable=False),
            sa.Column('amount', sa.Float(), nullable=False),
            sa.Column('fee', sa.Float(), nullable=False),
            sa.Column('description', sa.Text(), nullable=True),
            sa.Column('currency_code', sa.String(length=3), nullable=False),
            sa.Column('transction_metadata', sa.JSON(), nullable=True),
            sa.Column('created_at', sa.DateTime(), nullable=False),
            sa.ForeignKeyConstraint(['beneficiary_id'], ['beneficiaries.id'], ),
            sa.ForeignKeyConstraint(['credit_account_id'], ['account.id'], ),
            sa.ForeignKeyConstraint(['debit_account_id'], ['account.id'], ),
            sa.ForeignKeyConstraint(['payment_method_id'], ['payment_method.id'], ),
            sa.ForeignKeyConstraint(['user_id'], ['user.id'], ),
            sa.PrimaryKeyConstraint('id')
        )
    
    if not table_exists('transaction_view'):
        op.create_table('transaction_view',
            sa.Column('id', GUID(), nullable=False),
            sa.Column('transaction_id', GUID(), nullable=False),
            sa.Column('account_id', GUID(), nullable=False),
            sa.Column('view_type', sa.String(length=50), nullable=False),
            sa.Column('created_at', sa.DateTime(), nullable=False),
            sa.ForeignKeyConstraint(['account_id'], ['account.id'], ),
            sa.ForeignKeyConstraint(['transaction_id'], ['transaction.id'], ),
            sa.PrimaryKeyConstraint('id')
        )
    
    # Check if the role column already exists in user table
    inspector = inspect(op.get_bind())
    columns = [col['name'] for col in inspector.get_columns('user')]
    
    if 'role' not in columns:
        # First add the column as nullable
        with op.batch_alter_table('user', schema=None) as batch_op:
            batch_op.add_column(sa.Column('role', sa.String(length=120), nullable=True))

        # Then set a default value for existing rows
        op.execute("UPDATE user SET role = 'user' WHERE role IS NULL")

        # Finally alter the column to be NOT NULL
        with op.batch_alter_table('user', schema=None) as batch_op:
            batch_op.alter_column('role', nullable=False)

    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    # Check if the role column exists before trying to drop it
    inspector = inspect(op.get_bind())
    columns = [col['name'] for col in inspector.get_columns('user')]
    
    if 'role' in columns:
        with op.batch_alter_table('user', schema=None) as batch_op:
            batch_op.drop_column('role')

    # Drop tables only if they exist
    if table_exists('transaction_view'):
        op.drop_table('transaction_view')
    
    if table_exists('transaction'):
        op.drop_table('transaction')
    
    if table_exists('beneficiaries'):
        op.drop_table('beneficiaries')
    
    if table_exists('payment_method'):
        op.drop_table('payment_method')
    # ### end Alembic commands ###